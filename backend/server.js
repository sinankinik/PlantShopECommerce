// backend/server.js

const express = require('express');
const dotenv = require('dotenv');
const morgan = require('morgan');
const cookieParser = require('cookie-parser');
const cors = require('cors'); // CORS middleware'i
const path = require('path'); // Node.js'in 'path' modÃ¼lÃ¼nÃ¼ import edin (dosya yollarÄ± iÃ§in)

const db = require('./config/db'); // MySQL baÄŸlantÄ±sÄ±
const authRoutes = require('./routes/authRoutes'); // Kimlik doÄŸrulama rotalarÄ±
const productRoutes = require('./routes/productRoutes'); // ÃœrÃ¼n rotalarÄ±nÄ± import edin
const orderRoutes = require('./routes/orderRoutes'); // SipariÅŸ rotalarÄ±nÄ± import edin


// AppError ve diÄŸer Ã¶zel hata sÄ±nÄ±flarÄ±nÄ± buradan import edin
const { AppError, UnauthorizedError, ForbiddenError, NotFoundError, BadRequestError } = require('./errors/AppError');
const cronJobs = require('./utils/cronJobs'); // <-- YENÄ° EKLEME: Cron job'larÄ± import et
// Ã–deme rotalarÄ±nÄ± da import etmeniz gerekecek, eÄŸer daha Ã¶nce eklemediyseniz:
const paymentRoutes = require('./routes/paymentRoutes'); // <-- YENÄ° EKLEME (Ã–deme entegrasyonu iÃ§in)


// Ortam deÄŸiÅŸkenlerini yÃ¼kle (process.env eriÅŸimi iÃ§in)
dotenv.config({ path: './config/config.env' });

// Express uygulamasÄ±nÄ± baÅŸlat
const app = express();

// MySQL veritabanÄ±na baÄŸlan
db.getConnection()
    .then(() => console.log('MySQL veritabanÄ±na baÅŸarÄ±yla baÄŸlanÄ±ldÄ±!'))
    .catch(err => {
        console.error('MySQL veritabanÄ±na baÄŸlanÄ±rken hata oluÅŸtu:', err);
        process.exit(1); // Hata durumunda uygulamayÄ± kapat
    });

// Middleware'ler
app.use(cors({
    origin: process.env.FRONTEND_URL || 'http://localhost:3000', // Frontend URL'inizi buraya girin veya env'den alÄ±n
    credentials: true, // Ã‡erezlerin gÃ¶nderilmesine izin ver
}));
app.use(express.json()); // JSON body parser
app.use(cookieParser()); // Cookie parser

// Public klasÃ¶rÃ¼nÃ¼ statik dosyalar iÃ§in sun
// 'backend' klasÃ¶rÃ¼nden direkt 'public' klasÃ¶rÃ¼ne gitmeliyiz.
// __dirname: C:\Users\Samsung\Desktop\DesignToCode\PlantShopECommerce\backend
// Hedef: C:\Users\Samsung\Desktop\DesignToCode\PlantShopECommerce\backend\public
app.use(express.static(path.join(__dirname, 'public'))); // <-- Bu satÄ±rÄ±n tam olarak bu ÅŸekilde olduÄŸundan emin olun

if (process.env.NODE_ENV === 'development') {
    app.use(morgan('dev')); // GeliÅŸtirme modunda HTTP isteklerini logla
}

// Routes
// Kimlik doÄŸrulama rotalarÄ±nÄ± ekle
app.use('/api/auth', authRoutes);

// ÃœrÃ¼n rotalarÄ±nÄ± ekle
app.use('/api/products', productRoutes);

// SipariÅŸ rotalarÄ±nÄ± ekle
app.use('/api/orders', orderRoutes);

// Ã–deme rotalarÄ±nÄ± ekle (eÄŸer daha Ã¶nce eklemediyseniz, ÅŸimdi ekleyin)
app.use('/api/payments', paymentRoutes); // <-- YENÄ° EKLEME (Ã–deme entegrasyonu iÃ§in)


// DiÄŸer rotalarÄ±nÄ±z buraya eklenebilir
// app.use('/api/users', userRoutes);


// Cron job'larÄ± baÅŸlat (API rotalarÄ± tanÄ±mlandÄ±ktan sonra, hata iÅŸleyiciden Ã¶nce)
cronJobs.startCronJobs(); // <-- YENÄ° EKLEME: Cron job'larÄ± baÅŸlat

// TanÄ±mlanmamÄ±ÅŸ rotalarÄ± yakalamak iÃ§in middleware
app.all('*', (req, res, next) => {
    next(new AppError(`Bu sunucuda ${req.originalUrl} adresi bulunamadÄ±!`, 404));
});

// Global hata iÅŸleyici middleware'i
app.use((err, req, res, next) => {
    if (!err.isOperational) {
        console.error('ERROR ğŸ’¥', err); // HatanÄ±n tam yÄ±ÄŸÄ±n izini logla
        err.statusCode = 500;
        err.status = 'error';
        err.message = 'Bir ÅŸeyler ters gitti!';
    }

    // Response gÃ¶nder
    res.status(err.statusCode).json({
        status: err.status,
        message: err.message,
        // GeliÅŸtirme modunda stack trace'i gÃ¶ster
        ...(process.env.NODE_ENV === 'development' && { error: err, stack: err.stack }),
    });
});


// Sunucuyu baÅŸlat
const PORT = process.env.PORT || 5000;
const server = app.listen(PORT, () => {
    console.log(`Server ${process.env.NODE_ENV} modunda ${PORT} portunda Ã§alÄ±ÅŸÄ±yor...`);
});

// Ä°ÅŸlenmeyen Promise reddetmeleri iÃ§in hata yakalama
process.on('unhandledRejection', err => {
    console.log('UNHANDLED REJECTION! ğŸ’¥ Uygulama kapatÄ±lÄ±yor...');
    console.error(err.name, err.message);
    server.close(() => {
        process.exit(1);
    });
});

// Ä°ÅŸlenmeyen istisnalar iÃ§in hata yakalama (Senkron kodlardaki hatalar)
process.on('uncaughtException', err => {
    console.log('UNCAUGHT EXCEPTION! ğŸ’¥ Uygulama kapatÄ±lÄ±yor...');
    console.error(err.name, err.message);
    process.exit(1);
});
